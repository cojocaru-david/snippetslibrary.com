name: Auto Version Bump

on:
  push:
    branches: [v2]
    paths-ignore:
      - "package.json"
      - "package-lock.json"
      - ".github/**"
      - "README.md"
      - "docker-compose.yml"
      - "Dockerfile"
      - "drizzle.config.ts"
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_type }}"
          else
            # Auto bump patch version for regular commits
            BUMP_TYPE="patch"
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Bump version
        id: version
        run: |
          # Use npm version to bump the version
          NEW_VERSION=$(npm version ${{ steps.bump_type.outputs.bump_type }} --no-git-tag-version)
          # Remove the 'v' prefix from npm version output
          NEW_VERSION=${NEW_VERSION#v}
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Check if version actually changed
        id: check_changes
        run: |
          if git diff --quiet package.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version change detected"
          fi

      - name: Commit version bump
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "ðŸ”§ chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
          git push

      - name: Create Git tag
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Generate changelog
        if: steps.check_changes.outputs.changed == 'true'
        id: changelog
        run: |
          # Create a simple changelog based on commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 --exclude="v${{ steps.version.outputs.new_version }}" 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, generating changelog from recent commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          else
            echo "Generating changelog since last tag: $LAST_TAG"
            CHANGELOG=$(git log ${LAST_TAG}..HEAD~1 --pretty=format:"- %s (%h)")
          fi

          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changed == 'true' && github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.current_version.outputs.current_version }}...v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
