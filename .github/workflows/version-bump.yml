name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_id:
        description: "Prerelease identifier (alpha, beta, rc)"
        required: false
        default: "alpha"
      custom_version:
        description: "Custom version (overrides version_type)"
        required: false

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            # Install semver for version calculation
            npm install -g semver
            
            case "${{ github.event.inputs.version_type }}" in
              "patch")
                NEW_VERSION=$(semver -i patch ${{ steps.current_version.outputs.current_version }})
                ;;
              "minor")
                NEW_VERSION=$(semver -i minor ${{ steps.current_version.outputs.current_version }})
                ;;
              "major")
                NEW_VERSION=$(semver -i major ${{ steps.current_version.outputs.current_version }})
                ;;
              "prerelease")
                NEW_VERSION=$(semver -i prerelease --preid ${{ github.event.inputs.prerelease_id }} ${{ steps.current_version.outputs.current_version }})
                ;;
              *)
                echo "Invalid version type"
                exit 1
                ;;
            esac
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.new_version }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Create a simple changelog based on commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, generating changelog from all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse | head -20)
          else
            echo "Generating changelog since last tag: $LAST_TAG"
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          # Save changelog to output (escape newlines)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ steps.version.outputs.new_version }}"
          title: "ðŸ”– Release v${{ steps.version.outputs.new_version }}"
          body: |
            ## Release v${{ steps.version.outputs.new_version }}

            This PR bumps the version from `${{ steps.current_version.outputs.current_version }}` to `${{ steps.version.outputs.new_version }}`.

            ### Changes in this release:
            ${{ steps.changelog.outputs.changelog }}

            ### Type: `${{ github.event.inputs.version_type }}`

            ---

            **Auto-generated by GitHub Actions**
          branch: release/v${{ steps.version.outputs.new_version }}
          base: v2
          delete-branch: true
          draft: false

      - name: Auto-merge PR if patch version
        if: github.event.inputs.version_type == 'patch' && steps.create_pr.outputs.pull-request-number
        run: |
          sleep 10
          gh pr merge ${{ steps.create_pr.outputs.pull-request-number }} --squash --auto
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: version-bump
    runs-on: ubuntu-latest
    if: github.event.inputs.version_type != 'prerelease'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: v2

      - name: Wait for version bump PR to be merged
        if: github.event.inputs.version_type == 'patch'
        run: |
          echo "Waiting for auto-merge to complete..."
          sleep 60

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          name: Release v${{ needs.version-bump.outputs.new_version }}
          body: |
            ## What's Changed

            ${{ needs.version-bump.outputs.changelog }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...v${{ needs.version-bump.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
